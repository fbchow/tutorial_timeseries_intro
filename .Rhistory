flights <- read.table('https://cdn.rawgit.com/mikejt33/DataViz/246c2026/data/flights.csv.gz', header = TRUE, sep = ',')
?read.table.url
?read.table.url
?read.table
flights <- read.csv('https://cdn.rawgit.com/mikejt33/DataViz/246c2026/data/flights.csv.gz', header = TRUE, sep = ',')
install.packages("reshape2")
install.packages("forecast")
install.packages("ggfortify")
install.packages("xts")
suppressMessages(library(tidyverse))
library(reshape2)
library(ggfortify)
library(forecast)
suppressMessages(library(tidyverse))
library(reshape2)
library(ggfortify)
library(forecast)
library(data.table)
library(here)
flights.path <- here("flights.csv.gz")
flights <- read.table(flights.path, header = TRUE, sep=',')
library(data.table)
library(here)
flights.path <- here("flights.csv")
flights <- read.table(flights.path, header = TRUE, sep=',')
library(data.table)
library(here)
flights.path <- here("flights.csv")
flights <- read.table(flights.path, header = TRUE, sep=',')
# aggregate(DEP_DELAY~DAY_OF_WEEK, data = flights, mean)
# mean.dept.delay <- tapply(flights$FL_DATE, flights$DEP_DELAY, mean, na.rm=TRUE)
mean.dept.delay <- flights %>% group_by(factor(FL_DATE)) %>%
summarize(average.delay = mean(DEP_DELAY, na.rm = TRUE))
mean.dept.delay <- ts(mean.dept.delay$average.delay)
str(mean.dept.delay)
plot(mean.dept.delay, main="Avg Departure Delay for 2017", ylab="avg departure delay (min.)")
# n = window size
ma <- function(x,n=5){stats::filter(x,rep(1/n,n), sides=2)}
moving.average <- ma(mean.dept.delay$average.delay, 31)
# n = window size
ma <- function(x,n=5){stats::filter(x,rep(1/n,n), sides=2)}
moving.average <- ma(mean.dept.delay$average.delay, 31)
suppressMessages(library(tidyverse))
library(reshape2)
library(ggfortify)
library(forecast)
library(data.table)
library(here)
flights.path <- here("flights.csv")
flights <- read.table(flights.path, header = TRUE, sep=',')
# aggregate(DEP_DELAY~DAY_OF_WEEK, data = flights, mean)
# mean.dept.delay <- tapply(flights$FL_DATE, flights$DEP_DELAY, mean, na.rm=TRUE)
mean.dept.delay <- flights %>% group_by(factor(FL_DATE)) %>%
summarize(average.delay = mean(DEP_DELAY, na.rm = TRUE))
mean.dept.delay <- ts(mean.dept.delay$average.delay)
str(mean.dept.delay)
plot(mean.dept.delay, main="Avg Departure Delay for 2017", ylab="avg departure delay (min.)")
# n = window size
ma <- function(x,n=5){stats::filter(x,rep(1/n,n), sides=2)}
moving.average <- ma(mean.dept.delay$average.delay, 31)
library(data.table)
library(here)
flights.path <- here("flights.csv.gz")
flights <- read.table(flights.path, header = TRUE, sep=',')
library(data.table)
library(here)
flights.path <- here("flights.csv.gz")
flights <- read.table(flights.path, header = TRUE, sep=',', fileEncoding = "UTF-8")
library(data.table)
library(here)
flights.path <- here("flights.csv.gz")
flights <- read.table(flights.path, header = TRUE, sep=',', fileEncoding = "UTF-8")
library(data.table)
library(here)
flights.path <- here("flights.csv")
flights <- read.table(flights.path, header = TRUE, sep=',')
library(data.table)
library(here)
flights.path <- here("flights.csv")
flights <- read.table(flights.path, header = TRUE, sep=',')
suppressMessages(library(tidyverse))
library(reshape2)
library(ggfortify)
library(forecast)
library(data.table)
library(here)
flights.path <- here("flights.csv")
flights <- read.table(flights.path, header = TRUE, sep=',')
suppressMessages(library(tidyverse))
library(reshape2)
library(ggfortify)
library(forecast)
library(data.table)
library(here)
suppressMessages(library(tidyverse))
library(reshape2)
library(ggfortify)
library(forecast)
library(data.table)
library(here)
flights.path <- here("flights.csv")
flights <- read.table(flights.path, header = TRUE, sep=',')
str(flights)
head(str(flights))
# aggregate(DEP_DELAY~DAY_OF_WEEK, data = flights, mean)
# mean.dept.delay <- tapply(flights$FL_DATE, flights$DEP_DELAY, mean, na.rm=TRUE)
mean.dept.delay <- flights %>% group_by(factor(FL_DATE)) %>%
summarize(average.delay = mean(DEP_DELAY, na.rm = TRUE))
mean.dept.delay <- ts(mean.dept.delay$average.delay)
str(mean.dept.delay)
plot(mean.dept.delay, main="Avg Departure Delay for 2017", ylab="avg departure delay (min.)")
# n = window size
ma <- function(x,n=5){stats::filter(x,rep(1/n,n), sides=2)}
moving.average <- ma(mean.dept.delay$average.delay, 31)
?ma
suppressMessages(library(tidyverse))
library(reshape2)
library(ggfortify)
library(forecast)
library(data.table)
library(here)
# n = window size
ma <- function(x,n=5){stats::filter(x,rep(1/n,n), sides=2)}
moving.average <- ma(mean.dept.delay$average.delay, 31)
moving.average <- ma(mean.dept.delay, 31)
(moving.average <- ma(mean.dept.delay, 31))
plot(moving.average, ylab="Moving Average", main="Moving Average of Departure Times in 2017")
autoplot(moving.average)
plot(moving.average, ylab="Moving Average", main="Moving Average of Departure Times in 2017")
# generate dates to make plots more legible
dates <- seq(as.Date('2017-01-01'), as.Date('2017-12-31'), by = 'day') # create sequence of dates
# generate dates to make plots more legible
dates <- seq(as.Date('2017-01-01'), as.Date('2017-12-31'), by = 'day') # create sequence of dates
plot.ts <- data.frame(smoothed_MA = moving.average, ave_delay=as.numeric(mean.dept.delay),date=dates)
# melt into long format
# plot both the original and smoothed data can be easily plotted on the same axes
plot.ts.melted <- melt(plot.ts, id='date')
ggplot(plot.ts.melted) + geom_line(aes(x = date, y  = value, col = variable)) + labs(x = 'Date', y = 'Average arrival delay (minutes)')
# melt into long format
# plot both the original and smoothed data can be easily plotted on the same axes
plot.ts.melted <- melt(plot.ts, id='date')
ggplot(plot.ts.melted) + geom_line(aes(x = date, y  = value, col = variable)) + labs(x = 'Date', y = 'Average arrival delay (minutes)') + theme_bw()
?theme
# melt into long format
# plot both the original and smoothed data can be easily plotted on the same axes
plot.ts.melted <- melt(plot.ts, id='date')
ggplot(plot.ts.melted) + geom_line(aes(x = date, y  = value, col = variable)) + labs(x = 'Date', y = 'Average arrival delay (minutes)') + theme_minimal()
# melt into long format
# plot both the original and smoothed data can be easily plotted on the same axes
plot.ts.melted <- melt(plot.ts, id='date')
ggplot(plot.ts.melted) + geom_line(aes(x = date, y  = value, col = variable)) + labs(x = 'Date', y = 'Average arrival delay (minutes)', title='Smoothed vs MA Delay') + theme_minimal()
names(mean.dept.delay) <- c('FL_DATE', 'average.delay')
lowess.index <- seq(1:nrow(mean.dept.delay))
lowess.index <- seq(1:nrow(mean.dept.delay))
# names(mean.dept.delay) <- c('FL_DATE', 'average.delay')
# lowess.index <- seq(1:nrow(mean.dept.delay))
mean.dept.delay$index <- 1:nrow(mean.dept.delay)
# names(mean.dept.delay) <- c('FL_DATE', 'average.delay')
# lowess.index <- seq(1:nrow(mean.dept.delay))
mean.dept.delay$index <- 1:nrow(mean.dept.delay)
names(mean.dept.delay) <- c('FL_DATE', 'average.delay')
# lowess.index <- seq(1:nrow(mean.dept.delay))
mean.dept.delay$index <- 1:nrow(mean.dept.delay)
suppressMessages(library(tidyverse))
library(reshape2)
library(ggfortify)
library(forecast)
library(data.table)
library(here)
flights.path <- here("flights.csv")
flights <- read.table(flights.path, header = TRUE, sep=',')
str(flights)
# aggregate(DEP_DELAY~DAY_OF_WEEK, data = flights, mean)
# mean.dept.delay <- tapply(flights$FL_DATE, flights$DEP_DELAY, mean, na.rm=TRUE)
mean.dept.delay <- flights %>% group_by(factor(FL_DATE)) %>%
summarize(average.delay = mean(DEP_DELAY, na.rm = TRUE))
mean.dept.delay <- ts(mean.dept.delay$average.delay)
str(mean.dept.delay)
plot(mean.dept.delay, main="Avg Departure Delay for 2017", ylab="avg departure delay (min.)")
# n = window size
ma <- function(x,n=5){stats::filter(x,rep(1/n,n), sides=2)}
moving.average <- ma(mean.dept.delay, 31)
plot(moving.average, ylab="Moving Average", main="Moving Average of Departure Times in 2017")
autoplot(moving.average)
# generate dates to make plots more legible
dates <- seq(as.Date('2017-01-01'), as.Date('2017-12-31'), by = 'day') # create sequence of dates
plot.ts <- data.frame(smoothed_MA = moving.average, ave_delay=as.numeric(mean.dept.delay),date=dates)
# melt into long format
# plot both the original and smoothed data can be easily plotted on the same axes
plot.ts.melted <- melt(plot.ts, id='date')
ggplot(plot.ts.melted) + geom_line(aes(x = date, y  = value, col = variable)) + labs(x = 'Date', y = 'Average arrival delay (minutes)', title='Smoothed vs MA Delay') + theme_minimal()
names(mean.dept.delay) <- c('FL_DATE', 'average.delay')
# lowess.index <- seq(1:nrow(mean.dept.delay))
mean.dept.delay$index <- 1:nrow(mean.dept.delay)
1:nrow(mean.dept.delay)
nrow(mean.dept.delay)
mean.dept.delay
mean.dept.delay
# lowess.index <- seq(1:nrow(mean.dept.delay))
mean.dept.delay$index <- 1:nrow(mean.dept.delay, drop=FALSE)
# aggregate(DEP_DELAY~DAY_OF_WEEK, data = flights, mean)
# mean.dept.delay <- tapply(flights$FL_DATE, flights$DEP_DELAY, mean, na.rm=TRUE)
mean.dept.delay <- flights %>%
arrange(FL_DATE) %>%
group_by(factor(FL_DATE)) %>%
summarise(mean(DEP_DELAY, na.rm = TRUE))
names(mean.dept.delay) <- c('FL_DATE', 'AVE_DELAY')
# lowess.index <- seq(1:nrow(mean.dept.delay))
mean.dept.delay$index <- 1:nrow(mean.dept.delay)
names(mean.dept.delay) <- c('FL_DATE', 'average.delay')
# lowess.index <- seq(1:nrow(mean.dept.delay))
mean.dept.delay$index <- 1:nrow(mean.dept.delay)
mean.dept.delay <- cbind(mean.dept.delay, lowess.index)
names(mean.dept.delay) <- c('FL_DATE', 'average.delay')
lowess.index <- seq(1:nrow(mean.dept.delay))
# mean.dept.delay$index <- 1:nrow(mean.dept.delay)
mean.dept.delay <- cbind(mean.dept.delay, lowess.index)
loess(average.delay~lowess.index, data=mean.dept.delay, span = 1/31)
loess.model <- loess(average.delay~lowess.index, data=mean.dept.delay, span = 1/31)
# smooth the data by using the predict() function
trend_loess <- predict(loess_model)
# smooth the data by using the predict() function
trend_loess <- predict(loess.model)
# smooth the data by using the predict() function
trend.loess <- predict(loess.model)
# plot the smoothed data using base package
plot(trend.loess)
# plot using ggplot
# creating data frame with dates to improve readability of plots
plot_ts <- cbind(plot.ts, smoothed.loess = trend.loess)
# melt into long format so both the origininal and smoothed data can be plotted on the same axes
plot.ts.melted <- melt(plot.ts, id='date')
ggplot(plot.ts.melted) + geom_line(aes(x = date, y  = value, col = variable)) + labs(x = 'Date', y = 'Average arrival delay (minutes)')
data(AirPassengers)
timeseries_air = AirPassengers
plot(as.ts(timeseries_air))
trend_air = ma(timeseries_air, order = 12, centre = T)
timeseries_air = AirPassengers
plot(as.ts(timeseries_air))
trend_air = ma(timeseries_air, order = 12, centre = T)
trend_air = ma(timeseries_air)
# , order = 12, centre = T)
#lines(trend_air)
plot(as.ts(trend_air))
detrend_air = timeseries_air / trend_air
plot(as.ts(detrend_air))
ts_air = ts(timeseries_air, frequency = 12)
decompose_air = decompose(ts_air, "multiplicative")
plot(decompose_air)
### Advanced answers
plot(as.ts(decompose_air$seasonal))
plot(as.ts(decompose_air$trend))
plot(as.ts(decompose_air$random))
# aggregate(DEP_DELAY~DAY_OF_WEEK, data = flights, mean)
# mean.dept.delay <- tapply(flights$FL_DATE, flights$DEP_DELAY, mean, na.rm=TRUE)
mean.dept.delay <- flights %>%
arrange(FL_DATE) %>%
group_by(factor(FL_DATE)) %>%
summarise(mean(DEP_DELAY, na.rm = TRUE))
names(mean.dept.delay) <- c('FL_DATE', 'AVE_DELAY')
suppressMessages(library(tidyverse))
library(reshape2)
library(ggfortify)
library(forecast)
library(data.table)
library(here)
flights.path <- here("flights.csv")
flights <- read.table(flights.path, header = TRUE, sep=',')
str(flights)
# aggregate(DEP_DELAY~DAY_OF_WEEK, data = flights, mean)
# mean.dept.delay <- tapply(flights$FL_DATE, flights$DEP_DELAY, mean, na.rm=TRUE)
mean.dept.delay <- flights %>%
arrange(FL_DATE) %>%
group_by(factor(FL_DATE)) %>%
summarise(mean(DEP_DELAY, na.rm = TRUE))
names(mean.dept.delay) <- c('FL_DATE', 'AVE_DELAY')
mean.dept.delay <- ts(mean.dept.delay$average.delay)
mean.dept.delay <- ts(mean.dept.delay$AVE_DELAY)
mean.dept.delay <- ts(mean.dept.delay$AVE_DELAY)
mean.dept.delay <- ts(mean.dept.delay$AVE_DELAY)
# aggregate(DEP_DELAY~DAY_OF_WEEK, data = flights, mean)
# mean.dept.delay <- tapply(flights$FL_DATE, flights$DEP_DELAY, mean, na.rm=TRUE)
mean.dept.delay <- flights %>%
arrange(FL_DATE) %>%
group_by(factor(FL_DATE)) %>%
summarise(mean(DEP_DELAY, na.rm = TRUE))
names(mean.dept.delay) <- c('FL_DATE', 'AVE_DELAY')
mean.dept.delay <- ts(mean.dept.delay$AVE_DELAY)
plot(mean.dept.delay, main="Avg Departure Delay for 2017", ylab="avg departure delay (min.)")
# n = window size
ma <- function(x,n=5){stats::filter(x,rep(1/n,n), sides=2)}
moving.average <- ma(mean.dept.delay, 31)
plot(moving.average, ylab="Moving Average", main="Moving Average of Departure Times in 2017")
autoplot(moving.average)
# generate dates to make plots more legible
dates <- seq(as.Date('2017-01-01'), as.Date('2017-12-31'), by = 'day') # create sequence of dates
plot.ts <- data.frame(smoothed_MA = moving.average, ave_delay=as.numeric(mean.dept.delay),date=dates)
# melt into long format
# plot both the original and smoothed data can be easily plotted on the same axes
plot.ts.melted <- melt(plot.ts, id='date')
ggplot(plot.ts.melted) + geom_line(aes(x = date, y  = value, col = variable)) + labs(x = 'Date', y = 'Average arrival delay (minutes)', title='Smoothed vs MA Delay') + theme_minimal()
names(mean.dept.delay) <- c('FL_DATE', 'average.delay')
lowess.index <- seq(1:nrow(mean.dept.delay))
# lowess.index <- seq(1:nrow(mean.dept.delay))
mean.dept.delay$index <- 1:nrow(mean.dept.delay)
# lowess.index <- seq(1:nrow(mean.dept.delay))
mean.dept.delay$index <- 1:nrow(mean.dept.delay)
lowess.index <- seq(1:nrow(mean.dept.delay))
# lowess.index <- seq(1:nrow(mean.dept.delay))
mean.dept.delay$index <- 1:nrow(mean.dept.delay)
# lowess.index <- seq(1:nrow(mean.dept.delay))
mean.dept.delay$index <- seq(1:nrow(mean.dept.delay))
# aggregate(DEP_DELAY~DAY_OF_WEEK, data = flights, mean)
# mean.dept.delay <- tapply(flights$FL_DATE, flights$DEP_DELAY, mean, na.rm=TRUE)
mean.dept.delay <- flights %>%
arrange(FL_DATE) %>%
group_by(factor(FL_DATE)) %>%
summarise(mean(DEP_DELAY, na.rm = TRUE))
names(mean.dept.delay) <- c('FL_DATE', 'AVE_DELAY')
# names(mean.dept.delay) <- c('FL_DATE', 'average.delay')
# lowess.index <- seq(1:nrow(mean.dept.delay))
mean.dept.delay$index <- 1:nrow(mean.dept.delay)
mean.dept.delay <- cbind(mean.dept.delay, lowess.index)
loess.model <- loess(average.delay~lowess.index, data=mean.dept.delay, span = 1/31)
# names(mean.dept.delay) <- c('FL_DATE', 'average.delay')
# lowess.index <- seq(1:nrow(mean.dept.delay))
mean.dept.delay$index <- 1:nrow(mean.dept.delay)
mean.dept.delay <- cbind(mean.dept.delay, lowess.index)
loess.model <- loess(AVE_DELAY~index, data=mean.dept.delay, span = 1/31)
# smooth the data by using the predict() function
trend.loess <- predict(loess.model)
# plot the smoothed data using base package
plot(trend.loess)
# plot using ggplot
# creating data frame with dates to improve readability of plots
plot_ts <- cbind(plot.ts, smoothed.loess = trend.loess)
# melt into long format so both the origininal and smoothed data can be plotted on the same axes
plot.ts.melted <- melt(plot.ts, id='date')
ggplot(plot.ts.melted) + geom_line(aes(x = date, y  = value, col = variable)) + labs(x = 'Date', y = 'Average arrival delay (minutes)')
data(AirPassengers)
timeseries_air = AirPassengers
plot(as.ts(timeseries_air))
trend_air = ma(timeseries_air)
# , order = 12, centre = T)
#lines(trend_air)
plot(as.ts(trend_air))
detrend_air = timeseries_air / trend_air
plot(as.ts(detrend_air))
ts_air = ts(timeseries_air, frequency = 12)
decompose_air = decompose(ts_air, "multiplicative")
plot(decompose_air)
### Advanced answers
plot(as.ts(decompose_air$seasonal))
plot(as.ts(decompose_air$trend))
plot(as.ts(decompose_air$random))
suppressMessages(library(tidyverse))
library(reshape2)
library(ggfortify)
library(forecast)
library(data.table)
library(here)
flights.path <- here("flights.csv")
flights <- read.table(flights.path, header = TRUE, sep=',')
str(flights)
# aggregate(DEP_DELAY~DAY_OF_WEEK, data = flights, mean)
# mean.dept.delay <- tapply(flights$FL_DATE, flights$DEP_DELAY, mean, na.rm=TRUE)
mean.dept.delay <- flights %>%
arrange(FL_DATE) %>%
group_by(factor(FL_DATE)) %>%
summarise(mean(DEP_DELAY, na.rm = TRUE))
names(mean.dept.delay) <- c('FL_DATE', 'AVE_DELAY')
mean.dept.delay <- ts(mean.dept.delay$AVE_DELAY)
# str(mean.dept.delay)
plot(mean.dept.delay, main="Avg Departure Delay for 2017", ylab="avg departure delay (min.)")
# n = window size
ma <- function(x,n=5){stats::filter(x,rep(1/n,n), sides=2)}
moving.average <- ma(mean.dept.delay, 31)
plot(moving.average, ylab="Moving Average", main="Moving Average of Departure Times in 2017")
autoplot(moving.average)
# generate dates to make plots more legible
dates <- seq(as.Date('2017-01-01'), as.Date('2017-12-31'), by = 'day') # create sequence of dates
plot.ts <- data.frame(smoothed_MA = moving.average, ave_delay=as.numeric(mean.dept.delay),date=dates)
# melt into long format
# plot both the original and smoothed data can be easily plotted on the same axes
plot.ts.melted <- melt(plot.ts, id='date')
ggplot(plot.ts.melted) + geom_line(aes(x = date, y  = value, col = variable)) + labs(x = 'Date', y = 'Average arrival delay (minutes)', title='Smoothed vs MA Delay') + theme_minimal()
# names(mean.dept.delay) <- c('FL_DATE', 'average.delay')
# lowess.index <- seq(1:nrow(mean.dept.delay))
mean.dept.delay$index <- 1:nrow(mean.dept.delay)
mean.dept.delay
lowess.index <- seq(1:nrow(mean.dept.delay))
# aggregate(DEP_DELAY~DAY_OF_WEEK, data = flights, mean)
# mean.dept.delay <- tapply(flights$FL_DATE, flights$DEP_DELAY, mean, na.rm=TRUE)
mean.dept.delay <- flights %>%
arrange(FL_DATE) %>%
group_by(factor(FL_DATE)) %>%
summarise(mean(DEP_DELAY, na.rm = TRUE))
names(mean.dept.delay) <- c('FL_DATE', 'AVE_DELAY')
mean.dept.delay.ts <- ts(mean.dept.delay$AVE_DELAY)
# str(mean.dept.delay)
plot(mean.dept.delay.ts, main="Avg Departure Delay for 2017", ylab="avg departure delay (min.)")
# n = window size
ma <- function(x,n=5){stats::filter(x,rep(1/n,n), sides=2)}
moving.average <- ma(mean.dept.delay.ts, 31)
plot(moving.average, ylab="Moving Average", main="Moving Average of Departure Times in 2017")
autoplot(moving.average)
# generate dates to make plots more legible
dates <- seq(as.Date('2017-01-01'), as.Date('2017-12-31'), by = 'day') # create sequence of dates
plot.ts <- data.frame(smoothed_MA = moving.average, ave_delay=as.numeric(mean.dept.delay.ts),date=dates)
# melt into long format
# plot both the original and smoothed data can be easily plotted on the same axes
plot.ts.melted <- melt(plot.ts, id='date')
ggplot(plot.ts.melted) + geom_line(aes(x = date, y  = value, col = variable)) + labs(x = 'Date', y = 'Average arrival delay (minutes)', title='Smoothed vs MA Delay') + theme_minimal()
# names(mean.dept.delay) <- c('FL_DATE', 'average.delay')
# lowess.index <- seq(1:nrow(mean.dept.delay))
mean.dept.delay$index <- 1:nrow(mean.dept.delay)
mean.dept.delay <- cbind(mean.dept.delay, lowess.index)
loess.model <- loess(AVE_DELAY~index, data=mean.dept.delay, span = 1/31)
# smooth the data by using the predict() function
trend.loess <- predict(loess.model)
# plot the smoothed data using base package
plot(trend.loess)
# plot using ggplot
# creating data frame with dates to improve readability of plots
plot_ts <- cbind(plot.ts, smoothed.loess = trend.loess)
# melt into long format so both the origininal and smoothed data can be plotted on the same axes
plot.ts.melted <- melt(plot.ts, id='date')
ggplot(plot.ts.melted) + geom_line(aes(x = date, y  = value, col = variable)) + labs(x = 'Date', y = 'Average arrival delay (minutes)')
data(AirPassengers)
timeseries_air = AirPassengers
plot(as.ts(timeseries_air))
trend_air = ma(timeseries_air)
# , order = 12, centre = T)
#lines(trend_air)
plot(as.ts(trend_air))
detrend_air = timeseries_air / trend_air
plot(as.ts(detrend_air))
ts_air = ts(timeseries_air, frequency = 12)
decompose_air = decompose(ts_air, "multiplicative")
plot(decompose_air)
### Advanced answers
plot(as.ts(decompose_air$seasonal))
plot(as.ts(decompose_air$trend))
plot(as.ts(decompose_air$random))
# names(mean.dept.delay) <- c('FL_DATE', 'average.delay')
# lowess.index <- seq(1:nrow(mean.dept.delay))
mean.dept.delay$index <- 1:nrow(mean.dept.delay)
# mean.dept.delay <- cbind(mean.dept.delay, lowess.index)
loess.model <- loess(AVE_DELAY~index, data=mean.dept.delay, span = 1/31)
# smooth the data by using the predict() function
trend.loess <- predict(loess.model)
# plot the smoothed data using base package
plot(trend.loess)
# plot using ggplot
# creating data frame with dates to improve readability of plots
plot_ts <- cbind(plot.ts, smoothed.loess = trend.loess)
# melt into long format so both the origininal and smoothed data can be plotted on the same axes
plot.ts.melted <- melt(plot.ts, id='date')
ggplot(plot.ts.melted) + geom_line(aes(x = date, y  = value, col = variable)) + labs(x = 'Date', y = 'Average arrival delay (minutes)')
data(AirPassengers)
timeseries_air = AirPassengers
plot(as.ts(timeseries_air))
trend_air = ma(timeseries_air)
# , order = 12, centre = T)
#lines(trend_air)
plot(as.ts(trend_air))
detrend_air = timeseries_air / trend_air
plot(as.ts(detrend_air))
ts_air = ts(timeseries_air, frequency = 12)
decompose_air = decompose(ts_air, "multiplicative")
plot(decompose_air)
### Advanced answers
plot(as.ts(decompose_air$seasonal))
plot(as.ts(decompose_air$trend))
plot(as.ts(decompose_air$random))
